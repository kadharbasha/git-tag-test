#!/usr/bin/env groovy

def generateStage(serv) {
    return {
        stage("${serv}"){
            def jname ="${serv}"
            def secName = jname.split(" ")
            matches = sh (
                script: "git diff --name-only HEAD~1..HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${secName[0]} || git diff-tree --no-commit-id --name-only -r HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${secName[0]}", returnStatus: true
            ) == 0
            if("${secName[1]}"=="build"){
                if("$matches"!="false"){
                    dir ("services/${secName[0]}){
                        sh "ls -la"
                    }
                    echo"this is build"
                }
            }
            else if("${secName[1]}"=="docker"){
                if("$matches"!="false"){
                    dir ("services/${secName[0]}){
                        sh "ls -la"
                    }
                    echo "this is docker"
                }
            }
        }
    }
}

def list
def tagname
def tagnumber

pipeline {
    agent any
    stages {
        stage('parallel stage') {
            steps {
                script {
                    def job = ["dir1 build", "dir1 docker push", "dir2 build", "dir2 docker push"]
                    def parallelStagesMap = job.collectEntries {
                        ["${it}" : generateStage(it)]
                    }
                    parallel parallelStagesMap
                }
            }
        }
    }
}
