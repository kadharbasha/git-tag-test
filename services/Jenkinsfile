pipeline {
  agent any
  stages {
    stage('Clone sources') {
      steps {
        script {
          def filelist = getChangedFilesList() // List of filenames that have changed
          /*for(int i=0; i < filelist.size(); i++) {
            def filename = "${filelist[i]}".split("/")
            echo "${filename}"
          }*/
          def parallelStagesMap = filelist.collectEntries {
              ["${it}" : generateStage(it)]
          }
          parallel parallelStagesMap
        }
      }
    }
  }
}


@NonCPS
def getChangedFilesList() {
  changedFiles = []
    for (changeLogSet in currentBuild.changeSets) {
      for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
        for (file in entry.getAffectedFiles()) {
          def filename = "file.getPath().split("/");
            //print ("${filename[1]}")
          changedFiles.add(filename[1]) // add changed file to list
        }
      }
    }
  return changedFiles
}
