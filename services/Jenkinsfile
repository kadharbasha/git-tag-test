#!/usr/bin/env groovy

def tagname
def tagnumber

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '6'))
    }
    //agent { label 'go-mgmt-slave'}
    agent any
    stages {
        stage('parallel stage') {
            steps {
                script {
                    def job = [
                    "dir1 build", 
                    "dir1 docker push", 
                    "dir2 build",
                    "dir2 docker push", 
                    "dir3 build", 
                    "dir3 docker push", 
                    "dir4 build", 
                    "dir4 docker push", 
                    "dir5 build", 
                    "dir5 docker push",
                    "dir4v2 build", 
                    "dir4v2 docker push", 
                    "dir5v2 build", 
                    "dir5v2 docker push", 
                    "dir6 build", 
                    "dir6 docker push", 
                    "dir7 build", 
                    "dir7 docker push"]
                    def parallelStagesMap = job.collectEntries {
                        ["${it}" : generateStage(it)]
                    }
                    parallel parallelStagesMap
                }
            }
            post{
                always{
                    cleanWs()
                }
            }
        }
    }
}

def generateStage(serv) {
    return {
        stage("${serv}") {
            def jname ="${serv}"
            def secName = jname.split(" ")
def v2dir = "${secName[0]}".toString().replaceAll("v2","")
                echo "${v2dir}"
            matches = sh (
                script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${v2dir}", returnStatus: true
            ) == 0

            

            if("$matches"!="false"){
                if("${secName[1]}"=="build"){
                    //script {
                        //def root = tool name: 'maxapigo', type: 'go'
                        //withEnv(["GOPATH=${env.WORKSPACE}/go", "GOROOT=${root}", "GOBIN=${root}/bin", "PATH+GO=${root}/bin"]) {
                            dir ("services/${secName[0]}/cmd") {
                                sh "la -ls"
                                //sh "go clean -modcache"
                                //sh "go build main.go"
                            }
                        //}
                    }//
                    dir ("services/${secName[0]}"){
                        sh "docker build --add-host=stash.nov.com:10.23.20.22 -f build/Dockerfile ."
                    }
                }

                //if(("${secName[1]}"=="docker") && ("${BRANCH_NAME}" == "dev"))
                if("${secName[1]}"=="docker"){
                    def noSpec = "${secName[0]}".toString().replaceAll("[^a-zA-Z0-9 ]+","")
                    def map = [
                        dir1: "1.0.0", 
                        dir2: "2.0.1", 
                        dir3: "3.2.1",
                        dir4: "1.2.3",
                        dir4v2: "1.2.3",
                        dir5: "4.5.6",
                        dir5v2: "1.2.3"
                    ]
                    for (def key in map.keySet()) {
                        if("${key}" == "${noSpec}"){
                            tagname = "${key}"
                            tagnumber = "${map[key]}"
                            break
                        }
                    }
                    if(("${secName[0]}"!="dir6") && ("${secName[0]}"!="dir7")) {
                        dir ("services/${secName[0]}"){
                            sh "docker images"
                            sh "docker build -f build/dockerfile -t 31147669.dkr.ecr.us-east-1.amazonaws.com/ss01-prod-${tagname}:${tagnumber} ."
                            sh "docker images"
                        }
                    }
                    else{
                       dir ("services/${secName[0]}"){
                           sh "docker build -f build/dockerfile -t 31147669.dkr.ecr.us-east-1.amazonaws.com/ss01-prod-maxapi-${tagname}-intel:${tagnumber} ."
                           sh "docker images"
                           sh "docker build -f build/dockerfile -t 31147669.dkr.ecr.us-east-1.amazonaws.com/ss01-prod-maxapi-${tagname}-arm32:${tagnumber} ."
                           sh "docker images"
                       }
                    }
                }
            }
        }
        stage("${serv}") {
            def jname ="${serv}"
            def secName = jname.split(" ")
          matchesv2 = sh (
                script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$3'} | uniq | grep -x 'v2'", returnStatus: true
            ) == 0  
            if(("$matchesv2"!="false") && (("${secName[0]}"=="dir5v2") || ("${secName[0]}"=="dir4v2"))){
                def v2dir = "${secName[0]}".toString().replaceAll("v2","")
                echo "${v2dir}"
                if("${secName[1]}"=="build"){
                    //script {
                        //def root = tool name: 'maxapigo', type: 'go'
                        //withEnv(["GOPATH=${env.WORKSPACE}/go", "GOROOT=${root}", "GOBIN=${root}/bin", "PATH+GO=${root}/bin"]) {
                            dir ("services/${v2dir}/v2/cmd") {
                                sh "ls -la"
                                //sh "go clean -modcache"
                                //sh "go build main.go"
                            }
                        //}
                    //}
                    dir ("services/${v2dir}/v2"){
                        sh "docker build --add-host=stash.nov.com:10.23.20.22 -f build/Dockerfile ."
                    }
                }
            
                //if(("${secName[1]}"=="docker") && ("${BRANCH_NAME}" == "dev"))
                if("${secName[1]}"=="docker"){
                    def noSpec = "${secName[0]}".toString().replaceAll("[^a-zA-Z0-9 ]+","")
                    def map = [
                        dir1: "1.0.0", 
                        dir2: "2.0.1", 
                        dir3: "3.2.1",
                        dir4: "1.2.3",
                        dir4v2: "1.2.3",
                        dir5: "4.5.6",
                        dir5v2: "1.2.3"
                    ]
                    for (def key in map.keySet()) {
                        if("${key}" == "${noSpec}"){
                            tagname = "${key}"
                            tagnumber = "${map[key]}"
                            break
                        }
                    }
                    dir ("services/${v2dir}/v2"){
                        sh "docker build -f build/dockerfile -t 31147669.dkr.ecr.us-east-1.amazonaws.com/ss01-prod-${tagname}:${tagnumber} ."
                        sh "docker build -f build/dockerfile -t 31147669.dkr.ecr.us-east-1.amazonaws.com/ss01-prod-maxapi-${tagname}-intel:${tagnumber} ."
                        sh "docker build -f build/dockerfile -t 31147669.dkr.ecr.us-east-1.amazonaws.com/ss01-prod-maxapi-${tagname}-arm32:${tagnumber} ."
                        sh "docker images"
                    }
                }
            }
        }
}
    

