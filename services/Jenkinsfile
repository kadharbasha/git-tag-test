#!/usr/bin/env groovy
def tagname
def tagnumber

pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '6'))
    }
    agent any
    stages {
        stage('parallel stage') {
            steps {
                script {
                    def job = ["dir1 build", "dir1 docker push", "dir2 build", "dir2 docker push", "dir3 build", "dir3 docker push", "dir4 build", "dir4 docker push", "dir5 build", "dir5 docker push"]
                    def parallelStagesMap = job.collectEntries {
                        ["${it}" : generateStage(it)]
                    }
                    parallel parallelStagesMap
                }
            }
        }
    }
}

def generateStage(serv) {
  return {
    def jname ="${serv}"
    def secName = jname.split(" ")
    echo "${secName[0]}"
    def filelist = getChangedFilesList() // List of filenames that have changed
    echo "${filelist}"
    for(int i=0; i < filelist.size(); i++) {
      def filename = "${filelist[i]}".split("/")
      echo "${filename[1]}" 
      if("${filename[1]}" == "${secName[0]}"){
        echo "${filelist[i]}"
        stage("${serv}"){
          if("${secName[1]}"=="build"){
            echo "build job"
          }
          if("${secName[1]}"=="docker"){
            echo "docker push job"
          }
        }
      }
    }
  }
}

@NonCPS
def getChangedFilesList() {
  changedFiles = []
    for (changeLogSet in currentBuild.changeSets) {
      for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
        for (file in entry.getAffectedFiles()) {
          changedFiles.add(file.getPath()) // add changed file to list
        }
      }
    }
  return changedFiles
}
