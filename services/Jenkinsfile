#!/usr/bin/env groovy

def list
pipeline {
    options {
        buildDiscarder(logRotator(numToKeepStr: '6'))
    }
    agent none
    stages {
        stage('Preparing updated services') {
            agent any
            steps {
                script {
                    list = ["dir1", "dir2", "dir3"]
                    for(int i=0; i < list.size(); i++) {
                        stage(list[i] + ' build'){
                            matches = sh (
                                script: "git diff --name-only HEAD~1..HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${list[i]} || git diff-tree --no-commit-id --name-only -r HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${list[i]}", returnStatus: true
                            ) == 0
                            if("$matches"!=true){
                                echo "$matches"
                                sh "ls -la"
                                sh "cd services/${list[i]} && ls -la"
                                dir ("services/${list[i]}") {
                                    sh "ls -la"
                                }
                            }
                        }
                        stage(list[i] + '  docker push'){
                            matches = sh (
                                script: "git diff --name-only HEAD~1..HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${list[i]} || git diff-tree --no-commit-id --name-only -r HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${list[i]}", returnStatus: true
                            ) == 0
                            if("$matches"!=true){
                                echo "$matches"
                                sh "ls -la"
                                sh "cd services/${list[i]} && ls -la"
                                dir ("services/${list[i]}") {
                                    /*sh "docker build -f build/dockerfile ."*/
                                    sh "ls -la"
                                }
                            }
                        }
                    }
                }
            }
            post {
                cleanup {
                    cleanWs()
                }
            }
        }
    }
}
