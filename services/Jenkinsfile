pipeline {
  agent any
  stages {
    stage('Clone sources') {
      steps {
        script {
          def filelist = getChangedFilesList() // List of filenames that have changed
          def parallelStagesMap = filelist.collectEntries {
          def directoryName = "${it}".split("/")
          def serName = "${directoryName[1]}"
            echo "${serName}"
            ["${serName}" : generateStage(serName)]
          }
          parallel parallelStagesMap
        }
      }
    }
  }
}

def generateStage(serv) {
    return {
        stage("${serv}"){
          echo "${serv}"
        }
    }
}

@NonCPS
def getChangedFilesList() {
  changedFiles = []
    for (changeLogSet in currentBuild.changeSets) {
      for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
        for (file in entry.getAffectedFiles()) {
          changedFiles.add(file.getPath()) // add changed file to list
        }
      }
    }
  return changedFiles
}
