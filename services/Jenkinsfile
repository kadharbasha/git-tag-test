#!/usr/bin/env groovy

//def s3BucketName = "ss01-prod-jenkins-bucket"
// def latestTag= "git tag --sort=committerdate | tail -1"

pipeline {
  agent any
  /*agent {
    label 'access-portal-spot-slave'
  }
  environment {
    WORKSPACE = '/home/jenkins/workspace/ACCESS-PORTAL'
  }*/
  options {
    buildDiscarder(logRotator(daysToKeepStr: '30', artifactDaysToKeepStr: '30'))
  }
  stages {
    /*stage('Rebase Pull Request') {
      steps {
        nodejs(nodeJSInstallationName: 'node') {
          sh script: "node tools/scripts/rebase-pr.js $BRANCH_NAME"
        }
      }
    }
    stage('Install Node Modules') {
      steps {
        nodejs(nodeJSInstallationName: 'node') {
          sh script: "npm ci"
        }
      }
    }
    stage('Build') {
      parallel {
        stage('Default') {
          steps {
            nodejs(nodeJSInstallationName: 'node') {
              sh script: "npm run test:tools", label: "Test Tools"
              sh script: "node_modules/.bin/commitlint --from origin/master", label: "Lint Commit Message(s)"
              sh script: "node tools/scripts/ci-format-check.js $BRANCH_NAME", label: "Check Code Formatting"
             // sh script: "node tools/scripts/ci-lint.js $BRANCH_NAME", label: "Lint Code"
              //sh script: "node tools/scripts/ci-test.js $BRANCH_NAME", label: "Test Code"
              //sh script: "node tools/scripts/ci-e2e.js $BRANCH_NAME", label: "E2E Test Code"
            }
          }
        }
        stage('Design System') {
          steps {
            nodejs(nodeJSInstallationName: 'node') {
              sh script: "node tools/scripts/ci-design-system-docs-check.js", label: "Check Documentation"
              sh script: "npm run ng -- run shared-ui-design-system:build-storybook --docs-mode", label: "Build Code"
            }
          }
        }
        stage ('Docs') {
          steps {
            nodejs(nodeJSInstallationName: 'node') {
              sh script: "npm run ng -- run website:build-docusaurus"
            }
          }
        }
      }
    }
    stage('Copy Artifact to Test') {
      when {
        anyOf {
          branch 'master'
        }
      }
      steps {
        sh script: "aws s3 rm --recursive s3://${s3BucketName}/ACCESS-PORTAL-DEV/dist_artifacts_latest/", label: "Clean Destination Folder"
        sh script: "aws s3 sync dist/ s3://${s3BucketName}/ACCESS-PORTAL-DEV/dist_artifacts_latest", label: "Copy Artifact To Destination Folder"
        sh script: "sudo rm -rf /home/jenkins/app04d1/dist/test/*", label: "Clean EFS Folder"
        sh script: "sudo aws s3 cp s3://${s3BucketName}/ACCESS-PORTAL-DEV/dist_artifacts_latest/apps/ /home/jenkins/app04d1/dist/test/apps/ --recursive", label: "Copy from Destination to EFS"
      }
    }*/
    stage('Copy Artifact to Staging') {
      when {
        anyOf {
          branch 'test-qa1'
          // expression { BRANCH_NAME ==~ /^\d+\.\d+\.(\d+|x)$/ }
        }
      }
      steps {
        script {
        sh "ls -la"

        // def latestTAG= "git describe --tags 'git rev-list --tags --max-count=1'"
        // sh "echo ${latestTag}"
        // sh "pwd && ls -lart"
        // sh "sudo aws s3api put-object --bucket ss01-prod-jenkins-bucket  --key ACCESS-PORTAL-QA/QA-BUILDS/${latestTag}/"
        // sh "sudo aws s3 sync dist/ s3://${s3BucketName}/ACCESS-PORTAL-QA/QA-BUILDS/${latestTag}/"
        // sh "sudo aws s3 rm --recursive s3://${s3BucketName}/ACCESS-PORTAL-QA/dist_artifacts_latest/"
        // sh "sudo aws s3 cp s3://${s3BucketName}/ACCESS-PORTAL-QA/dist_artifacts_latest/${latestTag}/ s3://${s3BucketName}/ACCESS-PORTAL-QA/dist_artifacts_latest/ --recursive "
                }

      }
    }
  }
  post {
    always {
      //archiveArtifacts artifacts: 'dist/**/*'
      cleanWs()
    }
  }
}
