#!/usr/bin/env groovy
def tagname
def tagnumber

pipeline {
  options {
        buildDiscarder(logRotator(numToKeepStr: '6'))
    }
  agent any
  stages {
    stage('parallel stage') {
      steps {
        script {
          def filelist = getChangedFilesList() // List of filenames that have changed
          def parallelStagesMap = filelist.collectEntries {
          def directoryName = "${it}".split("/")
          def serName = "${directoryName[1]}"
            echo "${serName}"
            ["${serName}" : generateStage(serName)]
          }
          parallel parallelStagesMap
        }
      }
    }
  }
}

def generateStage(serv) {
    return {
        stage("${serv} build"){
          dir ("services/${serv}"){
            sh "docker build -f build/dockerfile ."
            echo "${BRANCH_NAME}"
          }
        }
      if(true){
          stage("${serv} docker push"){
            def noSpec = "${serv}".toString().replaceAll("[^a-zA-Z0-9 ]+","")
            def map = [
                dir1: "1.0.0", 
                dir2: "2.0.1", 
                dir3: "3.2.1",
                dir4: "1.2.3",
                dir5: "4.5.6"
            ]
            for (def key in map.keySet()) {
                if("${key}" == "${noSpec}"){
                    tagname = "${key}"
                    tagnumber = "${map[key]}"
                    break
                }
            }
            if(("${serv}"!="dir4") && ("${serv}"!="dir5")) {
                dir ("services/${serv}"){
                    sh "docker build -f build/dockerfile -t 31147669.dkr.ecr.us-east-1.amazonaws.com/ss01-prod-${tagname}:${tagnumber} ."
                    sh "docker images"
                }
            }
            else{
               dir ("services/${serv}"){
                   sh "docker build -f build/dockerfile -t 31147669.dkr.ecr.us-east-1.amazonaws.com/ss01-prod-maxapi-${tagname}-intel:${tagnumber} ."
                   sh "docker images"
                   sh "docker build -f build/dockerfile -t 31147669.dkr.ecr.us-east-1.amazonaws.com/ss01-prod-maxapi-${tagname}-arm32:${tagnumber} ."
                   sh "docker images"
               }
            }
          }
       }
    }
}

@NonCPS
def getChangedFilesList() {
  changedFiles = []
    for (changeLogSet in currentBuild.changeSets) {
      for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
        for (file in entry.getAffectedFiles()) {
          changedFiles.add(file.getPath()) // add changed file to list
        }
      }
    }
  return changedFiles
}
