#!/usr/bin/env groovy

def generateStage(serv) {
    return {
        stage("${serv}"){
            dir ("services/${list[i]}") {
                sh "${serv}"
            }
        }
    }
}

pipeline {
    agent any
    stages {
        stage('parallel stage') {
            steps {
                script {
                    def list = ["dir1", "dir2"]
                    for(int i=0; i < list.size(); i++) {
                        matches = sh (
                            script: "git diff --name-only HEAD~1..HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${list[i]} || git diff-tree --no-commit-id --name-only -r HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${list[i]}", returnStatus: true
                        ) == 0
                        if("$matches"!="true"){
                            def job = ["${list[i]} build", "${list[i]} docke push"]
                            parallel parallelStagesMap
                        }
                    }
                    def tagname
                    def tagnumber
                    def parallelStagesMap = job.collectEntries {
                        ["${it}" : generateStage(it)]
                    }
                }
            }
        }
    }
}
