#!/usr/bin/env groovy
def list
def nameOfServices = ['timeseries-pi' ,'timeseriesboard' ,'timeseriescontextpi' ,'uom' ,'usermanagement' ,'usernotification' ,'usersettings' ,'websocket' ,'websocketv2' ,'wellmanager']
def builds = [:]
pipeline {
    agent { label 'go-mgmt-slave'}
    stages {
        stage('buildparallel'){
            steps {
                script {
                    nameOfServices.each {
                        builds[it] = {
                            stage("${it} build") {
                                when {
                                    expression {
                                         matches = sh(returnStatus: true, script: "git diff --name-only HEAD~1..HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x '${it}' || git diff-tree --no-commit-id --name-only -r HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x '${it}'")
                                        return !matches
                                    }
                                }
                                steps {
                                    script {
                                    dir ("services/${it}") {
                                    sh " ls"
                                    }
                                    }
                                    script {
                                    dir ("services/${it}") {
                                    sh " ls"
                                    }
                                    }
                                }
                            }
                            stage("${it} docker build") {
                                when {
                                    expression {
                                         matches = sh(returnStatus: true, script: "git diff --name-only HEAD~1..HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x '${it}' || git diff-tree --no-commit-id --name-only -r HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x '${it}'")
                                        return !matches
                                    }
                                    // branch 'dev'
                                }
                                steps {
                                    dir ("services/${it}") {
                                    sh "docker build -f build/dockerfile ."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
