#!/usr/bin/env groovy

def list = ["dir1", "dir2", "dir3", "dir4", "dir5"]
def tagname
def tagnumber
def parallelStagesMap = list.collectEntries {
    ["${it}" : generateStage(it)]
}

def generateStage(serv) {
    return {
        matches = sh (
            script: "git diff --name-only HEAD~1..HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${serv} || git diff-tree --no-commit-id --name-only -r HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${serv}", returnStatus: true
        ) == 0
        stages {
            stage("${serv} build"){
                if("$matches"!="true"){               
                    dir ("services/${serv}") {
                        sh "ls -la"
                        echo "${BRANCH_NAME}"
                    }
                }
            }
            // if("${BRANCH_NAME}" == "dev"){
            stage("${serv} docker push"){
                if("$matches"!="true"){               
                    dir ("services/${serv}") {
                        sh "ls -la"
                        echo "${BRANCH_NAME}"
                    }
                }
            }
            // }
        }
    }
}

pipeline {
    agent any
    stages {
        stage('parallel stage') {
            steps {
                script {
                    parallel parallelStagesMap
                }
            }
        }
    }
}
