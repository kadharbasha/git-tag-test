pipeline {
  agent any
  stages {
    stage('Clone sources') {
      steps {
        script {
          def filelist = getChangedFilesList() // List of filenames that have changed
          def parallelStagesMap1 = filelist.collectEntries {
          def directoryName = "${it}".split("/")
          def serName = ["${directoryName[1]} build", "${directoryName[1]} docker push"]
            def parallelStagesMap2 = serName.collectEntries {
              ["${it}" : generateStage(it)]
            }
          }
          parallel parallelStagesMap1
          parallel parallelStagesMap2
        }
      }
    }
  }
}

def generateStage(serv) {
  return {
    stage("${serv}"){
      def jname ="${serv}"
      def secName = jname.split(" ")
      if("${secName[1]}"=="build"){
        sh "echo build"
      }
      if("${secName[1]}"=="docker"){
        sh "echo docker"
      }
    }
  }
}

@NonCPS
def getChangedFilesList() {
  changedFiles = []
    for (changeLogSet in currentBuild.changeSets) {
      for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
        for (file in entry.getAffectedFiles()) {
          changedFiles.add(file.getPath()) // add changed file to list
        }
      }
    }
  return changedFiles
}
