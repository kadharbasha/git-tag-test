def jobs = ["dir1", "dir2", "dir3"]

def parallelStagesMap = jobs.collectEntries {
    ["${it}" : generateStage(it)]
}

def generateStage(job) {
    return {
        stage("${job} build") {
            steps {
                script {
                    if ((matches = sh(returnStatus: true, script: "git diff --name-only HEAD~1..HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${job} || git diff-tree --no-commit-id --name-only -r HEAD | sort -u | awk -F/ {'print \$2'} | uniq | grep -x ${job}"))){
                        dir ("services/${job}") {
                        sh " ls"
                        }
                    }
                }
            }
        }
    }
}

pipeline {
    agent any
    stages {
        stage('parallel stage') {
            steps {
                script {
                    parallel parallelStagesMap
                }
            }
        }
    }
}
