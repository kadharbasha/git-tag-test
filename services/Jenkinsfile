pipeline {
  agent any
  stages {
    stage('Clone sources') {
      steps {
        script {
          def filelist = getChangedFilesList() // List of filenames that have changed
          def parallelStagesMap = filelist.collectEntries {
          def directoryName = "${it}".split("/")
            echo "${directoryName[1]}"
             // ["${filenfilename[1]}" : generateStage(it)]
          }
          //parallel parallelStagesMap
        }
      }
    }
  }
}


@NonCPS
def getChangedFilesList() {
  changedFiles = []
    for (changeLogSet in currentBuild.changeSets) {
      for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
        for (file in entry.getAffectedFiles()) {
          changedFiles.add(file.getPath()) // add changed file to list
        }
      }
    }
  return changedFiles
}
